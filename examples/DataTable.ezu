<component DataTable.ezu>

state {
  data: [],
  columns: [],
  
  // Table state
  currentPage: 1,
  pageSize: 25,
  totalItems: 0,
  totalPages: 0,
  
  // Sorting
  sortField: null,
  sortDirection: 'asc',
  
  // Filtering
  filters: {},
  globalSearch: "",
  
  // Selection
  selectedRows: [],
  isAllSelected: false,
  
  // Loading and error states
  isLoading: false,
  isError: false,
  errorMessage: "",
  
  // Advanced features
  isExporting: false,
  showColumnSettings: false,
  visibleColumns: [],
  
  // Real-time updates
  autoRefresh: false,
  refreshInterval: 30000,
  lastRefresh: null,
  
  // Bulk operations
  bulkOperation: null,
  isBulkProcessing: false
}

style {
  .data-table-container {
    background: white;
    border-radius: 12px;
    border: 1px solid var(--border-color, #e5e7eb);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }
  
  .table-header {
    padding: 20px 24px;
    border-bottom: 1px solid var(--border-color, #e5e7eb);
    background: var(--bg-secondary, #f9fafb);
  }
  
  .table-title {
    font-size: 20px;
    font-weight: 600;
    color: var(--text-primary, #111827);
    margin: 0 0 8px;
  }
  
  .table-subtitle {
    font-size: 14px;
    color: var(--text-secondary, #6b7280);
    margin: 0;
  }
  
  .table-controls {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 16px 24px;
    border-bottom: 1px solid var(--border-color, #e5e7eb);
    background: white;
    flex-wrap: wrap;
  }
  
  .search-input {
    flex: 1;
    min-width: 200px;
    padding: 8px 12px;
    border: 1px solid var(--border-color, #e5e7eb);
    border-radius: 6px;
    font-size: 14px;
    background: white;
  }
  
  .search-input:focus {
    outline: none;
    border-color: var(--accent-color, #3b82f6);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  .table-action-btn {
    padding: 8px 16px;
    border: 1px solid var(--border-color, #e5e7eb);
    border-radius: 6px;
    background: white;
    color: var(--text-primary, #111827);
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .table-action-btn:hover {
    background: var(--bg-secondary, #f9fafb);
    border-color: var(--accent-color, #3b82f6);
  }
  
  .table-action-btn.primary {
    background: var(--accent-color, #3b82f6);
    color: white;
    border-color: var(--accent-color, #3b82f6);
  }
  
  .table-action-btn.primary:hover {
    background: var(--accent-dark, #2563eb);
  }
  
  .table-action-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .bulk-actions {
    display: none;
    align-items: center;
    gap: 12px;
    padding: 12px 24px;
    background: var(--accent-bg, #eff6ff);
    border-bottom: 1px solid var(--border-color, #e5e7eb);
  }
  
  .bulk-actions.visible {
    display: flex;
  }
  
  .bulk-info {
    font-size: 14px;
    color: var(--text-secondary, #6b7280);
  }
  
  .table-wrapper {
    overflow-x: auto;
    overflow-y: hidden;
  }
  
  .data-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 14px;
  }
  
  .data-table th,
  .data-table td {
    padding: 12px 16px;
    text-align: left;
    border-bottom: 1px solid var(--border-color, #e5e7eb);
  }
  
  .data-table th {
    background: var(--bg-secondary, #f9fafb);
    font-weight: 600;
    color: var(--text-primary, #111827);
    position: sticky;
    top: 0;
    z-index: 10;
  }
  
  .data-table th.sortable {
    cursor: pointer;
    user-select: none;
    position: relative;
  }
  
  .data-table th.sortable:hover {
    background: var(--bg-tertiary, #f3f4f6);
  }
  
  .sort-indicator {
    margin-left: 8px;
    opacity: 0.5;
  }
  
  .sort-indicator.active {
    opacity: 1;
    color: var(--accent-color, #3b82f6);
  }
  
  .data-table tbody tr:hover {
    background: var(--bg-secondary, #f9fafb);
  }
  
  .data-table tbody tr.selected {
    background: var(--accent-bg, #eff6ff);
  }
  
  .row-checkbox {
    width: 16px;
    height: 16px;
    cursor: pointer;
  }
  
  .cell-content {
    max-width: 200px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  .cell-actions {
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .cell-action {
    padding: 4px 8px;
    border: none;
    border-radius: 4px;
    background: var(--bg-secondary, #f9fafb);
    color: var(--text-secondary, #6b7280);
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .cell-action:hover {
    background: var(--accent-color, #3b82f6);
    color: white;
  }
  
  .table-footer {
    display: flex;
    align-items: center;
    justify-content: between;
    padding: 16px 24px;
    border-top: 1px solid var(--border-color, #e5e7eb);
    background: var(--bg-secondary, #f9fafb);
  }
  
  .pagination-info {
    font-size: 14px;
    color: var(--text-secondary, #6b7280);
  }
  
  .pagination {
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .pagination-btn {
    padding: 6px 12px;
    border: 1px solid var(--border-color, #e5e7eb);
    border-radius: 4px;
    background: white;
    color: var(--text-primary, #111827);
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .pagination-btn:hover:not(:disabled) {
    background: var(--bg-secondary, #f9fafb);
    border-color: var(--accent-color, #3b82f6);
  }
  
  .pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .pagination-btn.active {
    background: var(--accent-color, #3b82f6);
    color: white;
    border-color: var(--accent-color, #3b82f6);
  }
  
  .page-size-select {
    padding: 6px 12px;
    border: 1px solid var(--border-color, #e5e7eb);
    border-radius: 4px;
    background: white;
    font-size: 14px;
  }
  
  .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100;
  }
  
  .loading-spinner {
    width: 32px;
    height: 32px;
    border: 3px solid var(--border-color, #e5e7eb);
    border-radius: 50%;
    border-top-color: var(--accent-color, #3b82f6);
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  .error-state {
    text-align: center;
    padding: 48px 24px;
    color: var(--text-secondary, #6b7280);
  }
  
  .error-icon {
    width: 64px;
    height: 64px;
    margin: 0 auto 16px;
    color: var(--danger-color, #ef4444);
  }
  
  .empty-state {
    text-align: center;
    padding: 48px 24px;
    color: var(--text-secondary, #6b7280);
  }
  
  .empty-icon {
    width: 64px;
    height: 64px;
    margin: 0 auto 16px;
    opacity: 0.5;
  }
  
  .status-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
    text-transform: uppercase;
  }
  
  .status-badge.active {
    background: var(--success-bg, #dcfce7);
    color: var(--success-color, #16a34a);
  }
  
  .status-badge.inactive {
    background: var(--danger-bg, #fee2e2);
    color: var(--danger-color, #dc2626);
  }
  
  .status-badge.pending {
    background: var(--warning-bg, #fef3c7);
    color: var(--warning-color, #d97706);
  }
  
  @media (max-width: 768px) {
    .table-controls {
      flex-direction: column;
      align-items: stretch;
    }
    
    .table-footer {
      flex-direction: column;
      gap: 12px;
      align-items: stretch;
    }
    
    .pagination {
      justify-content: center;
    }
  }
}

template {
  <div class="data-table-container" style="position: relative;">
    <!-- Loading Overlay -->
    {isLoading ? '<div class="loading-overlay"><div class="loading-spinner"></div></div>' : ''}
    
    <!-- Table Header -->
    <header class="table-header">
      <h2 class="table-title">Data Management</h2>
      <p class="table-subtitle">
        Showing {data.length} of {totalItems} records
        {lastRefresh ? ' ‚Ä¢ Last updated: ' + formatTime(lastRefresh) : ''}
      </p>
    </header>
    
    <!-- Table Controls -->
    <div class="table-controls">
      <input 
        type="text" 
        class="search-input" 
        placeholder="Search records..."
        value="{globalSearch}"
        on:input="handleGlobalSearch(event.target.value)"
      />
      
      <button 
        class="table-action-btn"
        on:click="toggleAutoRefresh()"
        title="Toggle Auto Refresh"
      >
        {autoRefresh ? 'Pause' : 'Play'} Auto Refresh
      </button>
      
      <button 
        class="table-action-btn"
        on:click="refreshData()"
        title="Refresh Data"
      >
        Refresh
      </button>
      
      <button 
        class="table-action-btn"
        on:click="exportData()"
        disabled="{isExporting}"
        title="Export Data"
      >
        {isExporting ? '‚è≥' : 'üì•'} Export
      </button>
      
      <button 
        class="table-action-btn"
        on:click="toggleColumnSettings()"
        title="Column Settings"
      >
        Columns
      </button>
      
      <button 
        class="table-action-btn primary"
        on:click="createNew()"
        title="Create New Record"
      >
        ‚ûï New
      </button>
    </div>
    
    <!-- Bulk Actions Bar -->
    <div class="bulk-actions {selectedRows.length > 0 ? 'visible' : ''}">
      <span class="bulk-info">{selectedRows.length} item(s) selected</span>
      
      <button 
        class="table-action-btn"
        on:click="bulkEdit()"
        disabled="{isBulkProcessing}"
      >
        Edit
      </button>
      
      <button 
        class="table-action-btn"
        on:click="bulkDelete()"
        disabled="{isBulkProcessing}"
      >
        Delete
      </button>
      
      <button 
        class="table-action-btn"
        on:click="bulkExport()"
        disabled="{isBulkProcessing}"
      >
        üì§ Export Selected
      </button>
      
      <button 
        class="table-action-btn"
        on:click="clearSelection()"
      >
        Clear
      </button>
    </div>
    
    <!-- Error State -->
    {isError ? 
      '<div class="error-state">' +
        '<div class="error-icon">!</div>' +
        '<h3>Error Loading Data</h3>' +
        '<p>' + errorMessage + '</p>' +
        '<button class="table-action-btn primary" onclick="refreshData()">Try Again</button>' +
      '</div>' : 
      
      // Data Table
      data.length === 0 && !isLoading ? 
        '<div class="empty-state">' +
          '<div class="empty-icon">‚àÖ</div>' +
          '<h3>No Data Available</h3>' +
          '<p>There are no records to display. Try adjusting your filters or create a new record.</p>' +
          '<button class="table-action-btn primary" onclick="createNew()">Create First Record</button>' +
        '</div>' :
        
        '<div class="table-wrapper">' +
          '<table class="data-table">' +
            '<thead>' +
              '<tr>' +
                '<th style="width: 40px;">' +
                  '<input type="checkbox" class="row-checkbox" ' + 
                  'checked="' + isAllSelected + '" ' +
                  'onchange="toggleAllSelection()" />' +
                '</th>' +
                columns.filter(col => visibleColumns.includes(col.key)).map(column =>
                  '<th class="' + (column.sortable !== false ? 'sortable' : '') + '" ' +
                  (column.sortable !== false ? 'onclick="handleSort(\'' + column.key + '\')"' : '') + '>' +
                    column.label +
                    (column.sortable !== false ? 
                      '<span class="sort-indicator ' + (sortField === column.key ? 'active' : '') + '">' +
                        (sortField === column.key ? 
                          (sortDirection === 'asc' ? '‚Üë' : '‚Üì') : '‚Üï') +
                      '</span>' : '') +
                  '</th>'
                ).join('') +
                '<th style="width: 120px;">Actions</th>' +
              '</tr>' +
            '</thead>' +
            '<tbody>' +
              data.map((row, index) =>
                '<tr class="' + (selectedRows.includes(row.id) ? 'selected' : '') + '">' +
                  '<td>' +
                    '<input type="checkbox" class="row-checkbox" ' +
                    'checked="' + selectedRows.includes(row.id) + '" ' +
                    'onchange="toggleRowSelection(\'' + row.id + '\')" />' +
                  '</td>' +
                  columns.filter(col => visibleColumns.includes(col.key)).map(column =>
                    '<td>' +
                      '<div class="cell-content" title="' + getCellValue(row, column) + '">' +
                        formatCellValue(row, column) +
                      '</div>' +
                    '</td>'
                  ).join('') +
                  '<td>' +
                    '<div class="cell-actions">' +
                      '<button class="cell-action" onclick="viewRecord(\'' + row.id + '\')" title="View">View</button>' +
                      '<button class="cell-action" onclick="editRecord(\'' + row.id + '\')" title="Edit">Edit</button>' +
                      '<button class="cell-action" onclick="deleteRecord(\'' + row.id + '\')" title="Delete">Del</button>' +
                    '</div>' +
                  '</td>' +
                '</tr>'
              ).join('') +
            '</tbody>' +
          '</table>' +
        '</div>'
    }
    
    <!-- Table Footer / Pagination -->
    {!isError && data.length > 0 ? 
      '<footer class="table-footer">' +
        '<div class="pagination-info">' +
          'Showing ' + ((currentPage - 1) * pageSize + 1) + ' to ' + 
          Math.min(currentPage * pageSize, totalItems) + ' of ' + totalItems + ' results' +
        '</div>' +
        
        '<div style="display: flex; align-items: center; gap: 16px;">' +
          '<div style="display: flex; align-items: center; gap: 8px;">' +
            '<span style="font-size: 14px;">Show:</span>' +
            '<select class="page-size-select" value="' + pageSize + '" onchange="changePageSize(event.target.value)">' +
              '<option value="10">10</option>' +
              '<option value="25">25</option>' +
              '<option value="50">50</option>' +
              '<option value="100">100</option>' +
            '</select>' +
          '</div>' +
          
          '<nav class="pagination">' +
            '<button class="pagination-btn" ' +
            'onclick="goToPage(1)" ' +
            'disabled="' + (currentPage === 1) + '">First</button>' +
            
            '<button class="pagination-btn" ' +
            'onclick="goToPage(' + (currentPage - 1) + ')" ' +
            'disabled="' + (currentPage === 1) + '">‚Äπ</button>' +
            
            generatePageNumbers().map(page =>
              '<button class="pagination-btn ' + (page === currentPage ? 'active' : '') + '" ' +
              'onclick="goToPage(' + page + ')">' + page + '</button>'
            ).join('') +
            
            '<button class="pagination-btn" ' +
            'onclick="goToPage(' + (currentPage + 1) + ')" ' +
            'disabled="' + (currentPage === totalPages) + '">‚Ä∫</button>' +
            
            '<button class="pagination-btn" ' +
            'onclick="goToPage(' + totalPages + ')" ' +
            'disabled="' + (currentPage === totalPages) + '">Last</button>' +
          '</nav>' +
        '</div>' +
      '</footer>' : ''
    }
  </div>
}

script {
  onMount() {
    this.initializeTable();
    this.loadData();
    
    if (this.state.autoRefresh) {
      this.startAutoRefresh();
    }
  }
  
  onDestroy() {
    this.stopAutoRefresh();
  }
  
  initializeTable() {
    // Set default visible columns
    const defaultColumns = this.state.columns.map(col => col.key);
    this.updateState('visibleColumns', defaultColumns);
  }
  
  async loadData(params = {}) {
    this.updateState('isLoading', true);
    this.updateState('isError', false);
    
    try {
      const queryParams = new URLSearchParams({
        page: this.state.currentPage,
        pageSize: this.state.pageSize,
        sortField: this.state.sortField || '',
        sortDirection: this.state.sortDirection,
        globalSearch: this.state.globalSearch,
        filters: JSON.stringify(this.state.filters),
        ...params
      });
      
      const response = await fetch(`/api/data?${queryParams}`, {
        headers: {
          'Authorization': `Bearer ${this.getAuthToken()}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      
      this.updateState('data', result.data || []);
      this.updateState('totalItems', result.totalItems || 0);
      this.updateState('totalPages', Math.ceil((result.totalItems || 0) / this.state.pageSize));
      this.updateState('lastRefresh', new Date());
      
      // Update columns if provided by server
      if (result.columns) {
        this.updateState('columns', result.columns);
      }
      
    } catch (error) {
      console.error('Error loading data:', error);
      this.updateState('isError', true);
      this.updateState('errorMessage', error.message || 'Failed to load data');
    } finally {
      this.updateState('isLoading', false);
    }
  }
  
  // Search and filtering
  handleGlobalSearch(query) {
    this.updateState('globalSearch', query);
    this.updateState('currentPage', 1);
    this.debounceSearch();
  }
  
  debounceSearch() {
    clearTimeout(this.searchTimeout);
    this.searchTimeout = setTimeout(() => {
      this.loadData();
    }, 300);
  }
  
  // Sorting
  handleSort(field) {
    let direction = 'asc';
    
    if (this.state.sortField === field && this.state.sortDirection === 'asc') {
      direction = 'desc';
    }
    
    this.updateState('sortField', field);
    this.updateState('sortDirection', direction);
    this.updateState('currentPage', 1);
    this.loadData();
  }
  
  // Pagination
  goToPage(page) {
    if (page >= 1 && page <= this.state.totalPages && page !== this.state.currentPage) {
      this.updateState('currentPage', page);
      this.loadData();
    }
  }
  
  changePageSize(newSize) {
    this.updateState('pageSize', parseInt(newSize));
    this.updateState('currentPage', 1);
    this.loadData();
  }
  
  generatePageNumbers() {
    const { currentPage, totalPages } = this.state;
    const maxVisible = 5;
    const pages = [];
    
    let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
    let endPage = Math.min(totalPages, startPage + maxVisible - 1);
    
    if (endPage - startPage < maxVisible - 1) {
      startPage = Math.max(1, endPage - maxVisible + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  }
  
  // Row selection
  toggleRowSelection(rowId) {
    const selectedRows = [...this.state.selectedRows];
    const index = selectedRows.indexOf(rowId);
    
    if (index > -1) {
      selectedRows.splice(index, 1);
    } else {
      selectedRows.push(rowId);
    }
    
    this.updateState('selectedRows', selectedRows);
    this.updateState('isAllSelected', selectedRows.length === this.state.data.length);
  }
  
  toggleAllSelection() {
    const allIds = this.state.data.map(row => row.id);
    
    if (this.state.isAllSelected) {
      this.updateState('selectedRows', []);
      this.updateState('isAllSelected', false);
    } else {
      this.updateState('selectedRows', allIds);
      this.updateState('isAllSelected', true);
    }
  }
  
  clearSelection() {
    this.updateState('selectedRows', []);
    this.updateState('isAllSelected', false);
  }
  
  // CRUD operations
  viewRecord(id) {
    window.dispatchEvent(new CustomEvent('table:view', { detail: { id } }));
  }
  
  editRecord(id) {
    window.dispatchEvent(new CustomEvent('table:edit', { detail: { id } }));
  }
  
  async deleteRecord(id) {
    if (!confirm('Are you sure you want to delete this record?')) return;
    
    try {
      const response = await fetch(`/api/data/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${this.getAuthToken()}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) throw new Error('Failed to delete record');
      
      this.loadData();
      this.showNotification('success', 'Record deleted successfully');
      
    } catch (error) {
      console.error('Error deleting record:', error);
      this.showNotification('error', 'Failed to delete record');
    }
  }
  
  createNew() {
    window.dispatchEvent(new CustomEvent('table:create'));
  }
  
  // Bulk operations
  async bulkEdit() {
    if (this.state.selectedRows.length === 0) return;
    
    window.dispatchEvent(new CustomEvent('table:bulk-edit', { 
      detail: { ids: this.state.selectedRows } 
    }));
  }
  
  async bulkDelete() {
    if (this.state.selectedRows.length === 0) return;
    
    if (!confirm(`Delete ${this.state.selectedRows.length} selected records?`)) return;
    
    this.updateState('isBulkProcessing', true);
    
    try {
      const response = await fetch('/api/data/bulk-delete', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.getAuthToken()}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ ids: this.state.selectedRows })
      });
      
      if (!response.ok) throw new Error('Failed to delete records');
      
      this.clearSelection();
      this.loadData();
      this.showNotification('success', 'Records deleted successfully');
      
    } catch (error) {
      console.error('Error in bulk delete:', error);
      this.showNotification('error', 'Failed to delete records');
    } finally {
      this.updateState('isBulkProcessing', false);
    }
  }
  
  // Data export
  async exportData() {
    this.updateState('isExporting', true);
    
    try {
      const response = await fetch('/api/data/export', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.getAuthToken()}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          filters: this.state.filters,
          globalSearch: this.state.globalSearch,
          sortField: this.state.sortField,
          sortDirection: this.state.sortDirection,
          columns: this.state.visibleColumns
        })
      });
      
      if (!response.ok) throw new Error('Export failed');
      
      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `data-export-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      this.showNotification('success', 'Data exported successfully');
      
    } catch (error) {
      console.error('Export error:', error);
      this.showNotification('error', 'Failed to export data');
    } finally {
      this.updateState('isExporting', false);
    }
  }
  
  // Auto-refresh functionality
  startAutoRefresh() {
    this.stopAutoRefresh();
    this.refreshInterval = setInterval(() => {
      this.loadData();
    }, this.state.refreshInterval);
  }
  
  stopAutoRefresh() {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = null;
    }
  }
  
  toggleAutoRefresh() {
    const newState = !this.state.autoRefresh;
    this.updateState('autoRefresh', newState);
    
    if (newState) {
      this.startAutoRefresh();
    } else {
      this.stopAutoRefresh();
    }
  }
  
  refreshData() {
    this.loadData();
  }
  
  // Utility methods
  getCellValue(row, column) {
    const keys = column.key.split('.');
    let value = row;
    
    for (const key of keys) {
      value = value?.[key];
      if (value === undefined) break;
    }
    
    return value ?? '';
  }
  
  formatCellValue(row, column) {
    const value = this.getCellValue(row, column);
    
    if (column.formatter) {
      return column.formatter(value, row);
    }
    
    if (column.type === 'date' && value) {
      return new Date(value).toLocaleDateString();
    }
    
    if (column.type === 'currency' && typeof value === 'number') {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
      }).format(value);
    }
    
    if (column.type === 'status') {
      return `<span class="status-badge ${value}">${value}</span>`;
    }
    
    return String(value);
  }
  
  formatTime(date) {
    if (!date) return 'Never';
    
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return 'Just now';
    if (diffMins < 60) return `${diffMins}m ago`;
    if (diffMins < 1440) return `${Math.floor(diffMins / 60)}h ago`;
    
    return date.toLocaleDateString();
  }
  
  getAuthToken() {
    return localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');
  }
  
  showNotification(type, message) {
    window.dispatchEvent(new CustomEvent('notification', {
      detail: { type, message }
    }));
  }
}

</component>